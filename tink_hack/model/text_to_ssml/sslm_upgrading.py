import asyncio
from config import CLIENT, ERROR_MESSAGE


async def upgrade_sslm(dialogue: str):
    """
    Обрабатывает диалог отца и дочки через ChatGPT.
    
    Args:
        dialogue (str): Исходный диалог
        api_key (str): API ключ OpenAI
        
    Returns:
        str: Обработанный диалог или None в случае ошибки
    """

    prompt = f"""
            SSML-теги используются для тонкой настройки синтеза речи: можно изменить паузы, ударения, выделить акцентные слова и т.д.
        Поддерживаются следующие теги:
        <speak> - обязательный тег, необходим для работы с SSML

        <speak> Пример использования обязательного тега speak </speak>
        <break> - используется, чтобы задать паузу в тексте, обязательный атрибут тега time позволяет параметризовать продолжительность паузы, принимает значения в мс и с, например time="80ms", time="2s"

        <speak> 
            Так можно вставить паузу <break time="500ms"/>
            Пауза закончилась 
        </speak>
        <voice> - используется, чтобы задать спикера и параметры голоса (для выбора стиля прочтения), которым будет озвучиваться текст. Тег имеет обязательный атрибут name, значениями которого являются наименования голосов, актуальный список значений можно получить при помощи метода ListVoices или посмотреть в таблице общедоступных голосов

        <speak>
            Этот пример начал озвучиваться одним голосом,
            <voice name='alyona:funny'>
            а вот дальше озвучивается уже другим.
            </voice>
            <voice name='alyona:neutral'>
            Таким же образом можно и просто сменить эмоцию
            </voice>
        </speak>    
        <emphasis> - используется для обозначения акцентного слова в вопросительном предложении. Текст, находящийся внутри тега, должен быть короче 150 символов (с пробелами). Если ваша фраза внутри тега <emphasis> превышает 150 символов, она будет сокращена принудительно. Имеет атрибут level, который задает силу акцента на слове, обязательный атрибут тега. Атрибут level может принимать следующие значения:
        none - акцент на обёрнутом тегом слове в вопросе не изменяется
        moderate - умеренное ударение на слове
        strong - выраженное смысловое ударение

        <speak>
            Вы хотите заказать <emphasis level="moderate">капучино</emphasis> 
            или <emphasis level="strong">американо</emphasis>?
            Вы <emphasis level="strong">хотите</emphasis> что-нибудь заказать?
        </speak>
        <s> и <p> - задают предложение и абзац в тексте соответственно:
        Для <s> пауза составляет 200 ms.
        Для <p> пауза составляет 400 ms.

        <speak>
        <p><s>Это первое предложение первого абзаца.</s> <s>Это второе предложение первого абзаца.</s></p>
        <p> Это второй абзац. </p>
        </speak>
        В данном примере пауза между первым и вторым предложением первого абзаца составит 200 ms, а между первым и вторым абзацем - 400 ms.
        <say-as> - задает информацию о типе текста внутри тега. Текст, находящийся внутри тега, должен быть короче 150 символов (с пробелами). Если ваша фраза внутри тега <say-as> превышает 150 символов, она будет сокращена принудительно. Тег имеет атрибут interpret-as, который определяет, как произносить текст, обязательный атрибут тега. Атрибут interpret-as может принимать следующие значения:  characters или spell-out - произнесение текста по символам, вне зависимости от того, текст это или число: "1234" можно при помощи этого тега произнести как "один два три четыре", в то время как без тега это "тысяча двести тридцать четыре". Также работает и для различных аббревиатур:

        <speak>
        Я недавно видел <say-as interpret-as="characters">НЛО</say-as>
        </speak>
        При помощи атрибута interpret-as можно произнести также и более сложные конструкции:

        <speak>
        Номер договора: <say-as interpret-as="characters">1234/5-6</say-as>
        </speak>
        <prosody> - задает скорость произношения и высоту тона голоса. Поменять скорость произношения можно изменяя значение атрибута rate:
    <speak>
       Ускорить произношение можно следующим образом: <prosody rate ="150%">увеличение скорости произношения при автоматизации обслуживания клиентов может повысить эффективность обзвона, т.к. сэкономит время клиента</prosody>
    </speak>
    При помощи атрибута pitch можно изменить тональность голоса:

    <speak>
     Меняя тональность, <prosody pitch ="80%">мы можем получить более глубокий голос</prosody>
    </speak>
    Оба атрибута можно менять единовременно внутри одного тега, а также сочетать с другими тегами:

    <speak>
     <prosody rate="140%" pitch="110%">Работает на всех голосах, в сочетании с <break time="5ms"/> паузами и другими тегами.</prosody>
    </speak>
    Максимально можно ускорить речь втрое ("300%") и втрое замедлить ("33%"), сделать голос втрое выше ("300%") и втрое ниже ("33%").
    Расстановка ударений
    Для управления ударениями достаточно добавить 0 после ударной гласной: "соро0ка" и "сорока0". Разметка ударений работает как в сочетании с SSML-тегами, так и в тексте без SSML.

    def build_request():
        return tts_pb2.SynthesizeSpeechRequest(
            input=tts_pb2.SynthesisInput(
                ssml="
                    <speak> Разметка ударений работает и в SSML:  жа0ркое, жарко0е.</speak>
                "
            ),
            audio_config=tts_pb2.AudioConfig(
                audio_encoding=tts_pb2.LINEAR16,
                sample_rate_hertz=sample_rate,
            ),
        )
        Используй теги SSML для улучшения существующего диалога, расставляя паузы, голосовые теги, темп и т.д. Верни толькоssml-строку:
        Диалог:
        {dialogue}
        """

    try:
        response = await asyncio.to_thread(
            CLIENT.chat.completions.create,
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Вы - эксперт по обработке диалогов"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"Ошибка при обработке диалога: {e}")
        return ERROR_MESSAGE